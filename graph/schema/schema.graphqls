type User {
  id: ID!
  email: String!
  name: Name!
}

type Name {
  givenName: String!
  familyName: String!
  formatted: String
}

type Language {
  id: ID!
  name: String!
}


type SubClass {
  id: ID
  name: String
  class: String
}

type Ability {
  id: ID
  # score?
  name: String
  description: [String]
  skills: [Skill]
}

type AbilityBonus {
  ability: Ability
  bonus: String
}

type Skill {
  id: ID
  name: String
}


type Class {
  id: ID
  name: String
  hitDie: Int
  proficiencyChoices: [Skill]
  proficiencies:[Skill]
  savingThrows: [Ability]
  startingEquipment: StartingEquipment
  classLevels: [ClassLevel]
  subClasses: [SubClass]
  spellcasting: Ability
  url: String
}

type ClassLevel {
  level: Int
  class: Class
  features: [Feature]
}

type Feature {
  id: ID
  name: String
  description: [String]
}

type Equipment {
  name: String
  category: String # Weapon, Armor, Tools

}

type StartingEquipment {
  class: Class
  startingEquipment: [Equipment]
  startingEquipmentOptions: [Equipment]
}


type Spell {
  id: ID!
  name: String!
  description: [String!]
  higherLevel: [String]
  range: String!
  components: [String]
  material: String
  ritual: Boolean
  duration: String
  concentration: String
}

type Character {
  id: ID
  user: User!
  ##
  name: String!
  age: Int!
  level: Int!
  ##
  race: Race!
  subRace: SubRace
  class: Class!
  subClass: SubClass
  traits: [Trait]
  equipment: [Equipment]
}

# Mutations
input UserInput {
  name: NameInput!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResponse {
  user: User!
  token: String!
}

input NameInput {
  givenName: String!
  familyName: String!
}

input CreateCharacterInput {
  name: String
  race: String
  class: String
  # background: String
}

type Query {
  user: User
  races: [Race!]
  classes: [Class!]
}

type Mutation {
  createCharacter(input: CreateCharacterInput!): Character!
  signUpUser(input: UserInput!): User!
  loginUser(input: LoginInput!): LoginResponse!
}